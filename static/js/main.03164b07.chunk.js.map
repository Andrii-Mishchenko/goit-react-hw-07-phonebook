{"version":3,"sources":["Phonebook.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","items","createReducer","state","payload","map","contact","name","includes","alert","filter","id","loading","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","contactsReducer","axios","defaults","baseURL","number","dispatch","a","post","data","contactId","delete","get","ContactForm","nameInputId","shortid","generate","numberInputId","handleInput","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","className","styles","form","this","form__label","htmlFor","form__input","type","pattern","title","required","onChange","button","Component","connect","contactsOperations","getLoading","getFilter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","onDeleteContact","contacts__item","buttonDelete","onClick","target","App","fetchContacts","container","formSubmitHandler","isLoadingContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03164b07.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Phonebook_container__1NUun\",\"title\":\"Phonebook_title__2KO0z\",\"form\":\"Phonebook_form__2COxL\",\"form__label\":\"Phonebook_form__label__dc1-b\",\"form__input\":\"Phonebook_form__input__1HlP4\",\"button\":\"Phonebook_button__kHEv9\",\"buttonDelete\":\"Phonebook_buttonDelete__32aye\",\"contacts\":\"Phonebook_contacts__2t9qD\",\"contacts__item\":\"Phonebook_contacts__item__1zpQy\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n\r\nexport const filterContacts = createAction('contacts/Filter');\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    filterContacts\r\n } from './contacts-actions'\r\n\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactsSuccess]: (state, { payload }) => payload,\r\n    \r\n    [addContactSuccess]: (state, { payload }) => state.map(contact => contact.name).includes(payload.name)\r\n    ? alert(`${payload.name} is already in contacts.`)\r\n    : [payload, ...state],\r\n  \r\n    \r\n    [deleteContactSuccess]: (state, { payload }) => state.filter(contact => contact.id !== payload),\r\n})\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSuccess]: () => false,\r\n    [fetchContactsError]: () => false,\r\n\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [filterContacts]: (state, { payload }) => payload,\r\n})\r\n\r\nconst error = createReducer(null, {})\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n    error,\r\n})","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\nimport {\r\n//   persistStore,\r\n\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n}),\r\n\r\n    logger\r\n];\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducer,\r\n    },\r\n    \r\n    middleware,\r\n});\r\n\r\n\r\n\r\nexport default store;","import axios from 'axios';\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () =>  async dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n\r\n    try {\r\n        const { data } = await axios.get('/contacts');\r\n        dispatch(fetchContactsSuccess(data));\r\n    } catch (error) {\r\n        dispatch(fetchContactsError(error));\r\n    }\r\n\r\n    // axios\r\n    //     .get('/contacts')\r\n    //     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    //     .catch(error => dispatch(fetchContactsError(error)));\r\n}\r\n\r\nconst addContact = ({ name, number }) => async dispatch => {\r\n    const contact = { name, number };\r\n    \r\n    dispatch(addContactRequest);\r\n\r\n     try {\r\n        const { data } = await axios.post('/contacts', contact);\r\n        dispatch(addContactSuccess(data));\r\n    } catch (error) {\r\n        dispatch(addContactError(error));\r\n    }\r\n    // axios\r\n    //     .post('/contacts', contact)\r\n    //     .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    //     .catch(error => dispatch(addContactError(error)));\r\n}\r\n\r\nconst deleteContact = contactId => async dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    try {\r\n        const { data } = await axios.delete(`/contacts/${contactId}`);\r\n        dispatch(deleteContactSuccess(contactId));\r\n    } catch (error) {\r\n        dispatch(deleteContactError(error));\r\n    }\r\n\r\n    // axios\r\n    //     .delete(`/contacts/${contactId}`)\r\n    //     .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    //     .catch(error => dispatch(deleteContactError(error)))\r\n}\r\n\r\nexport default { addContact, deleteContact, fetchContacts };","import React, {Component} from 'react';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types'\r\nimport styles from'../../Phonebook.module.css'\r\nimport { connect } from 'react-redux';\r\nimport {contactsOperations} from '../../redux/contacts';\r\n\r\n\r\n\r\nclass ContactForm extends Component {\r\n    static propTypes = {\r\n        onSubmit: PropTypes.func.isRequired,\r\n    }\r\n\r\n    state = { \r\n        name: '',\r\n        number: ''\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     this.props.fetchContacts()\r\n    // }\r\n\r\n    nameInputId = shortid.generate();\r\n    numberInputId = shortid.generate();\r\n\r\n    handleInput = e =>{\r\n        const {name, value} = e.currentTarget\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    }\r\n\r\n    handleSubmit = e =>{\r\n        e.preventDefault();\r\n        this.props.onSubmit(this.state)\r\n\r\n        this.reset();\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState({\r\n            name: '',\r\n            number: ''\r\n        })\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <form className={styles.form} onSubmit={this.handleSubmit} >\r\n                <label className={styles.form__label} htmlFor={this.nameInputId}>\r\n                    Name\r\n                    <input\r\n                        className={styles.form__input}\r\n                        type=\"text\"\r\n                        value={this.state.name}\r\n                        name=\"name\"\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                        onChange={this.handleInput}\r\n                        id={this.nameInputId}\r\n                    />\r\n                </label>\r\n            \r\n                <label className={styles.form__label} htmlFor={this.numberInputId}>\r\n                    Number\r\n                    <input\r\n                        className={styles.form__input}\r\n                        type=\"tel\"\r\n                        value={this.state.number}\r\n                        name=\"number\"\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required\r\n                        onChange={this.handleInput}\r\n                        id={this.numberInputId}\r\n                    />\r\n                </label>\r\n                <button className={styles.button} type=\"submit\">Add contact</button>\r\n            </form>\r\n         );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: ({ name, number }) => dispatch(contactsOperations.addContact({ name, number })),\r\n    // fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n})\r\n \r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n\r\n\r\nexport const getVisibleContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n        const normalizedFilter= filter.toLowerCase();\r\n\r\n        return contacts.filter(contact=>\r\n            contact.name.toLowerCase().includes(normalizedFilter),\r\n        );\r\n    },\r\n);\r\n\r\n// export const getVisibleContacts = state => {\r\n//     const contacts = getAllContacts(state)\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter= filter.toLowerCase();\r\n\r\n//     return contacts.filter(contact=>\r\n//     contact.name.toLowerCase().includes(normalizedFilter));\r\n// };","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport styles from'../../Phonebook.module.css'\r\nimport { connect } from 'react-redux';\r\nimport {contactsOperations} from '../../redux/contacts';\r\nimport {getVisibleContacts} from '../../redux/contacts/contacts-selectors';\r\n\r\nconst ContactList = ({contacts, onDeleteContact}) => (\r\n    <ul className={styles.contacts}>\r\n        {contacts.map(({id, name, number}) => (\r\n            <li className={styles.contacts__item} key={id}>\r\n                <p>{name}: {number}</p>\r\n                <button \r\n                    className={styles.buttonDelete} \r\n                    type=\"button\" \r\n                    onClick={() => onDeleteContact(id)}\r\n                >Delete</button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n) \r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.array.isRequired,    \r\n    onDeleteContact: PropTypes.func.isRequired,    \r\n}\r\n\r\n\r\nconst mapStateToProps = state =>({\r\n    contacts: getVisibleContacts(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDeleteContact: (id) => dispatch(contactsOperations.deleteContact(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from'../../Phonebook.module.css'\r\nimport { connect } from 'react-redux';\r\nimport { filterContacts } from '../../redux/contacts';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\n\r\n\r\nconst Filter = ({value, onChange}) => (\r\n    <div className={styles.contacts}>\r\n        <label className={styles.form__label}>\r\n            Find contacts by name\r\n            <input \r\n                className={styles.form__input} \r\n                type=\"text\" value={value} \r\n                onChange={onChange}\r\n            />\r\n        </label>\r\n    </div>\r\n)\r\n \r\nFilter.propTypes = {\r\n    // value: PropTypes.string.isRequired,    \r\n    onChange: PropTypes.func.isRequired,    \r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    value: getFilter(state),\r\n    \r\n})\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (e) => dispatch(filterContacts(e.target.value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactForm from './components/ContactForm'\r\nimport ContactList from './components/ContactList'\r\nimport Filter from './components/Filter'\r\nimport styles from './Phonebook.module.css'\r\nimport {contactsOperations} from './redux/contacts';\r\nimport { getLoading } from './redux/contacts/contacts-selectors';\r\n\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.fetchContacts();\r\n    }\r\n  \r\n    render() { \r\n\r\n        return (  \r\n            <div className={styles.container}>\r\n                <h1 className={styles.title}>Phonebook</h1>\r\n                <ContactForm onSubmit={this.formSubmitHandler}/>\r\n                <h2 className={styles.title}>Contacts</h2>\r\n                <Filter />\r\n                {this.props.isLoadingContacts && <h1>Loading</h1>}\r\n                <ContactList/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoadingContacts: getLoading(state)\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n// import { PersistGate } from 'redux-persist/integration/react'\r\n\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\r\n       <App />\r\n      {/* </PersistGate>       */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}